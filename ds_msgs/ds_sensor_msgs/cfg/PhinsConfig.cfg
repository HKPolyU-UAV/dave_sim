#!/usr/bin/env python
PACKAGE = "ds_sensor_msgs"

import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

default_filter = 1

zupt_enum = gen.enum([     gen.const("ZuptNone",            int_t, 0, "No Zero Update"),
                           gen.const("ZuptStatic10mps",     int_t, 1, "Static, 10m/s stddev"),
                           gen.const("ZuptStatic0p1mps",    int_t, 2, "Static, 0.1m/s stddev"),
                           gen.const("ZuptAutoStatic",      int_t, 3, "0.01m/s stddev when no rotation >10 deg/hr"),
                           gen.const("ZuptAutoStaticBench", int_t, 4, "0.01m/s AND 10 deg/hr stddev when no rotation > 10deg/hr"),
                           gen.const("ZuptPosition",        int_t, 5, "Repeat manual position input every step")],
                           "ZUPT Mode")

altitude_enum = gen.enum([ gen.const("AltitudeNone",  int_t, 0, "Use inertial altitude"),
                           gen.const("AltitudeGPS",   int_t, 1, "Use GPS Height"),
                           gen.const("AltitudeDepth", int_t, 2, "Use Depth sensor"),
                           gen.const("AltitudeHydro", int_t, 3, "Hydrography-specific GPS") ],
                           "Altitude stabilization mode enum")

rejection_enum = gen.enum([ gen.const("FilterForced",     int_t, 0, "Bypass the outlier rejection filter"),
                            gen.const("FilterOff",        int_t, 1, "Disable sensor"),
                            gen.const("FilterNormal",     int_t, 2, "Use normal rejection filter"),
                            gen.const("FilterForcedOnce", int_t, 3, "Force next measurement, then ignore")],
                            "Rejection filter enum")

gen.add("zuptMode",        int_t, 0, "ZUPT mode", 0, 0, 5, edit_method=zupt_enum)
gen.add("altMode",         int_t, 0, "Altitude mode", 0, 0, 3, edit_method=altitude_enum)
gen.add("gps1Rejection",   int_t, 0, "GPS 1 rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("gps2Rejection",   int_t, 0, "GPS 2 rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("dvl1Rejection",   int_t, 0, "DVL 1 bottom-track rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("dvl2Rejection",   int_t, 0, "DVL 2 bottom-track rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("dvlWt1Rejection", int_t, 0, "DVL 1 water-track rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("dvlWt2Rejection", int_t, 0, "DVL 2 water-track rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("depthRejection",  int_t, 0, "Depth sensor rejeciton filter mode", default_filter, 0, 3, edit_method=rejection_enum)
gen.add("usblRejection",   int_t, 0, "USBL rejection filter mode", default_filter, 0, 3, edit_method=rejection_enum)

exit(gen.generate(PACKAGE, "ds_phinsins", "PhinsConfig"))