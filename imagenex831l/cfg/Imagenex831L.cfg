#!/usr/bin/env python
"""Parameters for request sent to sonar.
TODO(aql) use macros as default values.
"""

PACKAGE = "imagenex831l"

from dynamic_reconfigure.parameter_generator_catkin import *

RECONFIGURE_RUNNING = 0
RECONFIGURE_STOP = 1
RECONFIGURE_CLOSE = 3

gen = ParameterGenerator()

# Byte 3: max range.
"""
max_range_enum = gen.enum([
  gen.const("MAX_RANGE_ID_2", double_t, 0.125, "0.125 m max range."),
  gen.const("MAX_RANGE_ID_4", double_t, 0.25, "0.25 m max range."),
  gen.const("MAX_RANGE_ID_6", double_t, 0.5, "0.5 m max range."),
  gen.const("MAX_RANGE_ID_8", double_t, 0.75, "0.75 m max range."),
  gen.const("MAX_RANGE_ID_10", double_t, 1.0, "1 m max range."),
  gen.const("MAX_RANGE_ID_20", double_t, 2.0, "2 m max range."),
  gen.const("MAX_RANGE_ID_30", double_t, 3.0, "3 m max range."),
  gen.const("MAX_RANGE_ID_40", double_t, 4.0, "4 m max range."),
  gen.const("MAX_RANGE_ID_50", double_t, 5.0, "5 m max range."),
  gen.const("MAX_RANGE_ID_60", double_t, 6.0, "6 m max range.")
], "Max range values.")
gen.add("max_range", double_t, RECONFIGURE_RUNNING,
  "Max range in the request (byte 3).", 1.0, edit_method=max_range_enum)
"""
max_range_enum = gen.enum([
  gen.const("MAX_RANGE_ID_2", int_t, 2, "0.125 m max range."),
  gen.const("MAX_RANGE_ID_4", int_t, 4, "0.25 m max range."),
  gen.const("MAX_RANGE_ID_6", int_t, 6, "0.5 m max range."),
  gen.const("MAX_RANGE_ID_8", int_t, 8, "0.75 m max range."),
  gen.const("MAX_RANGE_ID_10", int_t, 10, "1 m max range."),
  gen.const("MAX_RANGE_ID_20", int_t, 20, "2 m max range."),
  gen.const("MAX_RANGE_ID_30", int_t, 30, "3 m max range."),
  gen.const("MAX_RANGE_ID_40", int_t, 40, "4 m max range."),
  gen.const("MAX_RANGE_ID_50", int_t, 50, "5 m max range."),
  gen.const("MAX_RANGE_ID_60", int_t, 60, "6 m max range.")
], "Max range values.")
gen.add("max_range", int_t, RECONFIGURE_RUNNING,
  "Max range in the request (byte 3).", 60, edit_method=max_range_enum)

# Byte 5: step direction.
step_direction_enum = gen.enum([
  gen.const("STEP_DIRECTION_0", int_t, 0, "Normal operation."),
  gen.const("STEP_DIRECTION_1", int_t, 1, "Reverse step direction."),
], "Step direction.")
gen.add("step_direction", int_t, RECONFIGURE_RUNNING,
  "Step direction (byte 5).", 0, edit_method=step_direction_enum)

# Byte 8: start gain.
gen.add("start_gain", int_t, RECONFIGURE_RUNNING, "Start gain (1dB increment).", 
    20, 0, 40)

# Byte 10: absorption in dB per m.
gen.add("absorption", int_t, RECONFIGURE_RUNNING, "absorption in dB per m.", 
    17, 0, 255)

# Byte 11: Train angle ("offset").
gen.add("train_angle", int_t, RECONFIGURE_RUNNING, 
    "Train angle, which is the offset for the sector width (degree), \
        steps of 3 degrees.", 
    120, 0, 120)

# Byte 12: Sector width.
gen.add("sector_width", int_t, RECONFIGURE_RUNNING, 
    "Field of view covered by the sensor (degree), steps of 3 degrees.", 
    120, 0, 120)
# Byte 13: step size.
step_size_enum = gen.enum([
  gen.const("STEP_SIZE_0", int_t, 0, "No step."),
  gen.const("STEP_SIZE_1", int_t, 3, "0.9 degrees/step.")
], "Step size.")
gen.add("step_size", int_t, RECONFIGURE_RUNNING,
  "Step size.", 3, edit_method=step_size_enum)


# Byte 14: pulse length in microseconds.
gen.add("pulse", int_t, RECONFIGURE_RUNNING, "Pulse length in microseconds.", 
    10, 0, 100)

# Byte 15: min range in meters.
gen.add("min_range", int_t, RECONFIGURE_RUNNING, 
    "Min range in meters [0, 250]cm; value in cm.", 
    0, 0, 250)

# Byte 21: pitch/roll sensor mode.
pitch_roll_mode_enum = gen.enum([
  gen.const("PR_MODE_0", int_t, 0, "Interrogate pitch/roll sensor."),
  gen.const("PR_MODE_1", int_t, 1, "Calibration pitch/roll sensor.")
], "Pitch/roll sensor mode.")
gen.add("pitch_roll_mode", int_t, RECONFIGURE_RUNNING,
  "Pitch roll mode.", 0, edit_method=pitch_roll_mode_enum)

# Byte 22: profile mode.
profile_mode_enum = gen.enum([
  gen.const("PROFILE_MODE_0", int_t, 0, "Profile off."),
  gen.const("PROFILE_MODE_1", int_t, 1, "Profile on.")
], "Profile mode.")
gen.add("profile_mode", int_t, RECONFIGURE_RUNNING,
  "Profile mode.", 0, edit_method=profile_mode_enum)

# Byte 23: motor operation mode.
motor_mode_enum = gen.enum([
  gen.const("MOTOR_MODE_0", int_t, 0, "Normal operation."),
  gen.const("MOTOR_MODE_1", int_t, 1, "Calibrate sonar head transducer.")
], "Profile mode.")
gen.add("motor_mode", int_t, RECONFIGURE_RUNNING,
  "Motor mode.", 0, edit_method=motor_mode_enum)

# Byte 25: Frequency.
gen.add("frequency", int_t, RECONFIGURE_RUNNING, 
    "Frequency (kHz), 5kHz step.", 
    2250, 2150, 2350)


exit(gen.generate(PACKAGE, "imagenex831l", "Imagenex831L"))
